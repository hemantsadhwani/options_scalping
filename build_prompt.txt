Now I want to build a single file for Identifying the trades on Index and Options(CE or PE) in single file.

I'll try to create every logic as a parameterrised function.

Our objective is Option trading on Call or Put strike price. We will use the Nifty Index to decide the price action 
and based on that we shall trade on Call or Put.

Here we want to run the same file for the backtesting and later we shall change same to run on realtime trading.
We expect all the data folders from the main shall be passed with Nifty, Call & Put ohlc to validate the logic.

Code Logic.
Read all 3 Index, Call Option & Put Option file minute by minute to simulate the realtime processing.
Input files
Index: ./data/tradeview_rev_output.csv
Call: ./data/call/call_out.csv
Put: ./data/put/put_out.csv

Output files
Call: ./data/call/trades/call_rev_v1_trades.csv
Call: ./data/call/trades/call_cont_trades.csv
Put: ./data/put/trades/put_rev_v1_trades.csv
Put: ./data/put/trades/put_cont_trades.csv


    """
    Main workflow:
    1. For each processed directory, calculate CPR levels in-memory.
    """

    """
    Sub workflow index:
    1. Read OHLC for Index
    2. Run Indicators, W9, W28, StockRSI (optional in backtesting)
    3. Run strategy runner to generate initial signals.
    4. If signal generate = True
    5. Check if signal filtered thru CRP 
    6. If "Call_crp" or "Put_crp" == True
      a. Check if current candle Close was between "TC" & "BC" - Take both "Call" or "Put" trades which are filtered thru CRP (proximity_pct)
      b. If the Index Close was below "Daily BC" - Then take only "Call" signals which are filtered thru CRP (proximity_pct)
      c. If the Index Close was above "Daily TC" - Then take only "Put" signals which are filtered thru CRP (proximity_pct)
    7. Execute Trade


    2. For each processed directory, calculate CPR levels in-memory.
    3. Apply the CPR filter to the strategy's index output file.
    """